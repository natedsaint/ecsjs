{"version":3,"sources":["../../workers.js","../../Entify.js","components.js","assemblages.js","util.js","systems.js","index.js"],"names":["Workers","Entify","globals","workerCount","destroyWorker","worker","terminate","createWorkers","numWorkers","src","workers","Array","i","Worker","doWork","data","allData","Promise","resolve","reject","onmessage","onerror","postMessage","chunk","fps","JSON","stringify","doInit","transferrables","tfer","undefined","init","doDistributedWork","elementsPerWorker","length","all","map","index","start","promise","slice","allEntities","Entity","id","Date","toString","Math","random","prototype","count","components","push","destroy","idx","findIndex","entity","splice","print","console","log","addComponent","component","name","removeComponent","componentName","Components","AllSystems","System","setName","work","setup","postSetup","cleanup","workify","workerScript","numberOfWorkers","getInitData","oldSetup","bind","forEach","initData","oldWork","then","results","entities","event","concat","oldCleanup","startSystems","system","loopSystems","playing","window","requestAnimationFrame","loop","restart","reset","pause","play","stamp","performance","now","newStamp","delta","deltaTime","deltaSeconds","round","h","s","l","Color","Position","x","y","Size","radius","Velocity","Assemblages","Dot","size","color","position","velocity","hue","saturation","luminance","posY","posX","velX","velY","Utils","getRandomInt","max","floor","generatorSystem","numDots","ratio","c","width","height","cols","ceil","sqrt","rows","pixelsPerCol","pixelsPerRow","row","col","xSign","ySign","colliderSystem","moverSystem","drawerSystem","offscreen","ctx","getContext","alpha","perfCounter","clearRect","beginPath","fillStyle","strokeStyle","arc","PI","stroke","fill","perfText","font","fillText","canvas","newCanvas","cloneNode","canvasParent","parentNode","removeChild","appendChild","transferControlToOffscreen","clickerSystem","clicks","click","dot","mouseX","mouseY","hypot","mousedown","addEventListener","button","layerX","layerY","e","preventDefault","PAUSE_TXT","PLAY_TXT","document","getElementById","Systems","querySelector","target","innerHTML","parseInt","value"],"mappings":";AAqDeA,aAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,MAAAA,MAAAA,GAAAA,YAAAA,EAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,QAAAA,QAAAA,GAAAA,KAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,WAAAA,IAAAA,EAAAA,KAAAA,EAAAA,UAAAA,OAAAA,IAAAA,QAAAA,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,MAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,QAAAA,GAAAA,OAAAA,MAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EArDf,IAAMA,EAAU,CACdC,OAAQ,GACRC,QAAS,GACTC,YAAa,EACPC,cAJQ,WAAA,IAAA,EAAA,EAIMC,mBAAAA,KAAAA,SAAAA,EAAAA,GAJN,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAKNA,OALM,EAAA,KAAA,EAKNA,EAAOC,YALD,KAAA,EAAA,OAMZN,EAAQG,cANI,EAAA,OAAA,UAAA,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,MAAA,OAAA,SAAA,GAAA,OAAA,EAAA,MAAA,KAAA,YAAA,GASdI,cAAiC,WAE1B,IAFOC,IAAAA,EAAW,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAGC,EAAK,UAAA,OAAA,EAAA,UAAA,QAAA,EAC3BC,EAAU,IAAIC,MAAMH,GACfI,EAAI,EAAGA,EAAIJ,EAAYI,IAC9BF,EAAQE,GAAK,IAAIC,OAAOJ,GAGnBC,OADPV,EAAQG,aAAeK,EAChBE,GAETI,OAAOT,SAAAA,EAAQU,EAAMC,GACZ,OAAA,IAAIC,QAAQ,SAACC,EAASC,GAC3Bd,EAAOe,UAAYF,EACnBb,EAAOgB,QAAUF,EACjBd,EAAOiB,YAAY,CACjBC,MAAOR,EACPC,QAAAA,EACAQ,IAAKxB,EAAQC,OAAOuB,IACpBtB,QAASuB,KAAKC,UAAU1B,EAAQE,cAItCyB,OAAOtB,SAAAA,EAAQU,EAAMa,GACbC,IAAAA,EAAQD,EAAkB,CAACA,QAAkBE,EAC5C,OAAA,IAAIb,QAAQ,SAACC,EAASC,GAC3Bd,EAAOe,UAAYF,EACnBb,EAAOgB,QAAUF,EACjBd,EAAOiB,YAAY,CACjBS,MAAM,EACNhB,KAAAA,EACAa,eAAAA,GACCC,MAGPG,kBAAkBtB,SAAAA,EAASK,GAErBkB,IAAAA,EAAoBlB,EAAKmB,OAASxB,EAAQwB,OACvCjB,OAAAA,QAAQkB,IAAIzB,EAAQ0B,IAAI,SAAC/B,EAAQgC,GAChCC,IAAAA,EAAQD,EAAQJ,EAChBM,EAAUvC,EAAQc,OAAOT,EAAQU,EAAKyB,MAAMF,EAAOA,EAAML,GAAoBlB,GAE5EwB,OADPlC,EAAOkC,QAAUA,EACVA,OAKEvC,EAAAA,EAAAA,QAAAA,QAAAA;;ACqIAC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA1Lf,IAAA,EAAA,EAAA,QAAA,iBA0LeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,MAAAA,MAAAA,GAAAA,YAAAA,EAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,QAAAA,QAAAA,GAAAA,KAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,WAAAA,IAAAA,EAAAA,KAAAA,EAAAA,UAAAA,OAAAA,IAAAA,QAAAA,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,MAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,QAAAA,GAAAA,OAAAA,MAzLf,IAAMA,EAAS,GACfD,EAAQC,QAAAA,OAASA,EAGjBA,EAAOC,QAAU,GAGjBD,EAAOwC,YAAc,GACrBxC,EAAOyC,OAAS,WAOP,OANFC,KAAAA,KAAO,IAAIC,MAAQC,SAAS,KAChB,IAAhBC,KAAKC,SAAuB,GAAGF,SAAS,IACzC5C,EAAOyC,OAAOM,UAAUC,MACxBhD,EAAOyC,OAAOM,UAAUC,QACnBC,KAAAA,WAAa,GAClBjD,EAAOwC,YAAYU,KAAK,MACjB,MAETlD,EAAOyC,OAAOM,UAAUC,MAAQ,EAEhChD,EAAOyC,OAAOU,QAAU,SAAST,GACzBU,IAAAA,EAAMpD,EAAOwC,YAAYa,UAAU,SAACC,GACjCA,OAAAA,EAAOZ,KAAOA,IAEnBU,GACFpD,EAAOwC,YAAYe,OAAOH,EAAK,IAInCpD,EAAOyC,OAAOM,UAAUS,MAAQ,WAEvB,OADPC,QAAQC,IAAIlC,KAAKC,UAAU,KAAM,KAAM,IAChC,MAITzB,EAAOyC,OAAOM,UAAUY,aAAe,SAAWC,GAEzC,OADFX,KAAAA,WAAWW,EAAUC,MAAQD,EAC3B,MAGT5D,EAAOyC,OAAOM,UAAUe,gBAAkB,SAAWC,GAC/CF,IAAAA,EAAOE,EAOJ,MALqB,mBAAlBA,IACRF,EAAOE,EAAchB,UAAUc,aAG1B,KAAKZ,WAAWY,GAChB,MAGT7D,EAAOgE,WAAa,GAGpBhE,EAAOiE,WAAa,GACpBjE,EAAOkE,OAAS,SAASL,GAQhB,OAPFM,KAAAA,QAAQN,GACRO,KAAAA,KAAO,aACPC,KAAAA,MAAQ,aACRC,KAAAA,UAAY,aACZC,KAAAA,QAAU,aACVtE,KAAAA,QAAUD,EAAOC,QACtBD,EAAOiE,WAAWf,KAAK,MAChB,MAGTlD,EAAOkE,OAAOnB,UAAUoB,QAAU,SAASN,GAElC,OADFA,KAAAA,KAAOA,EACL,MAMT7D,EAAOkE,OAAOnB,UAAUyB,QAAU,SAASC,EAAcC,EAAiBC,GAAa,IAAA,EAAA,KAC/EC,EAAW,KAAKP,MAAMQ,KAAK,MAC5BR,KAAAA,MAAL,EAAa,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EACLO,OADK,EAAA,KAAA,EACLA,IADK,KAAA,EAYPD,GAVA,EAAKlE,SAAW,EAAKA,QAAQwB,SAC/B,EAAKxB,QAAQqE,QAAQ,SAAC1E,GACpBA,EAAOC,cAET,EAAKI,QAAQwB,OAAS,GAElB1B,EAAamE,GAAmB1E,EAAOC,QAAQC,YAC7CD,EAAAA,QAAAA,QAAUD,EAAOC,QACzB,EAAKQ,QAAUV,EAAQO,QAAAA,cAAcC,EAAYkE,IAE7CE,EAZO,CAAA,EAAA,KAAA,GAAA,MAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,KAAA,GAaU,EAAA,EAAKlE,QAbf,OAAA,YAAA,KAAA,GAAA,GAAA,GAAA,EAAA,EAAA,QAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAeHsE,GAFG3E,EAbA,EAAA,QAcD2E,EAAWJ,KAdV,CAAA,EAAA,KAAA,GAAA,MAgBC5E,OAhBD,EAAA,KAAA,GAgBCA,EAAQ2B,QAAAA,OAAOtB,EAAQ2E,EAASjE,KAAMiE,EAASpD,gBAhBhD,KAAA,GAAA,GAAA,EAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,IAAA,GAAA,EAAA,EAAA,EAAA,GAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,KAAA,GAAA,OAAA,EAAA,OAAA,UAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,SAyBRqD,KAAAA,QAAU,KAAKZ,KACfA,KAAAA,KAAL,EAAY,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EACJ,OADI,EAAA,KAAA,EACJ,EAAKY,UADD,KAAA,EAEGjF,OAFH,EAAA,KAAA,EAEGA,EAAQgC,QAAAA,kBAAkB,EAAKtB,QAAST,EAAOwC,aACzDyC,KAAK,SAACC,GACDC,IAAAA,EAAW,GAKRD,OAJPA,EAAQJ,QAAQ,SAACM,GACfD,EAAWA,EAASE,OAAOD,EAAMtE,QAEnCd,EAAOwC,YAAc2C,EACdD,IATD,KAAA,EAAA,OAAA,EAAA,OAAA,SAAA,EAAA,MAAA,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,MAaPI,KAAAA,WAAa,KAAKf,QAClBA,KAAAA,QAAL,EAAe,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EACP,OADO,EAAA,KAAA,EACP,EAAKe,aADE,KAAA,EAET,IAAA,EAAK7E,UAAW,EAAKA,QAAQwB,OAFpB,CAAA,EAAA,KAAA,GAAA,MAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,KAAA,EAGU,EAAA,EAAKxB,QAHf,OAAA,YAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,QAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAIHL,OADGA,EAHA,EAAA,MAAA,EAAA,KAAA,GAIHA,EAAOkC,QAJJ,KAAA,GAAA,GAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,KAAA,GAMU,EAAA,EAAK7B,QANf,OAAA,YAAA,KAAA,GAAA,GAAA,GAAA,EAAA,EAAA,QAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAOHV,OADGK,EANA,EAAA,MAAA,EAAA,KAAA,GAOHL,EAAQI,QAAAA,cAAcC,GAPnB,KAAA,GAAA,GAAA,EAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,IAAA,GAAA,EAAA,EAAA,EAAA,GAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GASX,EAAKK,QAAQwB,OAAS,EATX,KAAA,GAAA,OAAA,EAAA,OAAA,UAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,UAejBjC,EAAOqC,MAAP,EAAA,mBAAe,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,KAAA,EACQrC,EAAAA,EAAOuF,aADf,OAAA,YAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,QAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAELC,OADGA,EADE,EAAA,MAAA,EAAA,KAAA,EAELA,EAAOpB,KAAKpE,EAAOwC,aAFd,KAAA,EAAA,GAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,KAAA,GAIQxC,EAAAA,EAAOyF,YAJf,OAAA,YAAA,KAAA,GAAA,GAAA,GAAA,EAAA,EAAA,QAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAKLD,OADGA,EAJE,EAAA,MAAA,EAAA,KAAA,GAKLA,EAAOnB,QALF,KAAA,GAAA,GAAA,EAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,IAAA,GAAA,EAAA,EAAA,EAAA,GAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAObrE,EAAO0F,SAAU,EACjBC,OAAOC,sBAAsB5F,EAAO6F,MARvB,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,SAWf7F,EAAO8F,QAAP,EAAA,mBAAiB,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAET9F,OADNA,EAAO0F,SAAU,EADF,EAAA,KAAA,EAET1F,EAAO+F,QAFE,KAAA,EAGfJ,OAAOC,sBAAsB5F,EAAOqC,OAHrB,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,MAMjBrC,EAAOgG,MAAQ,WACbhG,EAAO0F,SAAU,GAGnB1F,EAAOiG,KAAO,WACZjG,EAAO0F,SAAU,EACjBC,OAAOC,sBAAsB5F,EAAO6F,OAGtC7F,EAAO+F,MAAP,EAAA,mBAAe,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,KAAA,EACQ/F,EAAAA,EAAOuF,aADf,OAAA,YAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,QAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAELC,OADGA,EADE,EAAA,MAAA,EAAA,KAAA,EAELA,EAAOjB,UAFF,KAAA,EAAA,GAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,KAAA,GAIQvE,EAAAA,EAAOyF,YAJf,OAAA,YAAA,KAAA,GAAA,GAAA,GAAA,EAAA,EAAA,QAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAKLD,OADGA,EAJE,EAAA,MAAA,EAAA,KAAA,GAKLA,EAAOjB,UALF,KAAA,GAAA,GAAA,EAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,IAAA,GAAA,EAAA,EAAA,EAAA,GAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAObvE,EAAOwC,YAAYP,OAAS,EAPf,EAAA,OAAA,UAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,SAYf,IAAIiE,EAAQC,YAAYC,MAExBpG,EAAO6F,KAAP,EAAA,mBAAc,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,KAAA,EACO7F,EAAAA,EAAOyF,YADd,OAAA,YAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,QAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAEJD,OADCA,EADG,EAAA,MAAA,EAAA,KAAA,EAEJA,EAAOpB,KAAKpE,EAAOwC,aAFf,KAAA,EAAA,GAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAIN6D,EAAWF,YAAYC,MACvBE,EAASD,EAAWH,EAC1BlG,EAAOuG,UAAYD,EACbE,EAAeF,EAAQ,IAC7BtG,EAAOuB,IAAMsB,KAAK4D,MAAM,EAAED,GAC1BN,EAAQG,EACJrG,EAAO0F,SACTC,OAAOC,sBAAsB5F,EAAO6F,MAX1B,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,SAeC7F,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACvJAgE,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAlCf,IAAMA,EAAa,CAEnBA,MAAmB,WAAS0C,IAAAA,EAAI,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAGC,EAAI,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAGC,EAAI,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAIrC,OAHFF,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EACF,OAGT5C,EAAW6C,MAAM9D,UAAUc,KAAO,QAElCG,EAAW8C,SAAW,WAASC,IAAAA,EAAE,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAGC,EAAE,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAG7B,OAFFD,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EACF,MAGThD,EAAW8C,SAAS/D,UAAUc,KAAO,WAErCG,EAAWiD,KAAO,WAASC,IAAAA,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAEzB,OADFA,KAAAA,OAASA,EACP,MAGTlD,EAAWiD,KAAKlE,UAAUc,KAAO,OAEjCG,EAAWmD,SAAW,WAASJ,IAAAA,EAAI,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAGC,EAAI,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAGjC,OAFFD,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EACF,MAGThD,EAAWmD,SAASpE,UAAUc,KAAO,WAEtBG,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACfAoD,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EApBf,IAAA,EAAA,EAAA,QAAA,oBACA,EAAA,EAAA,QAAA,oBAmBeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAlBf,IAAMA,EAAc,CAClBC,IAAK,SAASC,EAAMC,EAAOC,EAAUC,GAC/BnE,IAAAA,EAAS,IAAItD,EAAOyC,QAAAA,OACpBiF,EAAMH,EAAMb,GAAK,EACjBiB,EAAaJ,EAAMZ,GAAK,EACxBiB,EAAYL,EAAMX,GAAK,EACvBiB,EAAOL,EAASR,EAChBc,EAAON,EAAST,EAChBgB,EAAON,EAASV,EAChBiB,EAAOP,EAAST,EAKb1D,OAJPA,EAAOK,aAAa,IAAIK,EAAW6C,QAAAA,MAAMa,EAAKC,EAAYC,IAC1DtE,EAAOK,aAAa,IAAIK,EAAWiD,QAAAA,KAAKK,IACxChE,EAAOK,aAAa,IAAIK,EAAW8C,QAAAA,SAASgB,EAAKD,IACjDvE,EAAOK,aAAa,IAAIK,EAAWmD,QAAAA,SAASY,EAAMC,IAC3C1E,IAII8D,EAAAA,EAAAA,QAAAA,QAAAA;;ACdAa,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EANf,IAAMA,EAAQ,CACZC,aAAaC,SAAAA,GACJtF,OAAAA,KAAKuF,MAAMvF,KAAKC,SAAWD,KAAKuF,MAAMD,MAIlCF,EAAAA,EAAAA,QAAAA,QAAAA;;ACiKA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAvKf,IAAA,EAAA,EAAA,QAAA,oBACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,cAqKe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,MAAA,GAAA,YAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,QAAA,QAAA,GAAA,KAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,WAAA,IAAA,EAAA,KAAA,EAAA,UAAA,OAAA,IAAA,QAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,EAAA,GAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAAA,GAAA,OAAA,MAnKf,IAAMC,EAAeD,EAAMC,QAAAA,aAIrBG,EAAkB,IAAIrI,EAAOkE,QAAAA,OAAO,aAE1CmE,EAAgBjE,KAAO,WASdkE,IARHA,IAAAA,EAAUD,EAAgBC,QAC1BC,EAAQC,EAAEC,MAAQD,EAAEE,OACpBC,EAAO9F,KAAK+F,KAAK/F,KAAKgG,KAAKP,EAAUC,IACrCO,EAAOjG,KAAK+F,KAAK/F,KAAKgG,KAAKP,EAAUC,IACrCQ,EAAeP,EAAEC,MAAME,EACvBK,EAAeR,EAAEE,OAAOI,EACxBG,EAAM,EACNC,EAAM,EACHZ,KAAW,CACVf,IAAAA,EAAQ,CACZb,EAAIwB,EAAa,KACjBvB,EAAI,MACJC,EAAI,OAEAU,EAAOY,EAAa,IAAM,EAC5BgB,EAAMP,EACRO,KAEAA,EAAM,EACND,KAEIlC,IAEAS,EAAW,CAAET,GAFPkC,EAAM,GAAMD,EAAe,GAEjBhC,GADVkC,EAAM,GAAMH,EAAe,IAEjCI,EAAWjB,EAAa,GAAM,GAAK,EACnCkB,EAAWlB,EAAa,GAAM,GAAK,EACnCT,EAAW,CACfV,EAAGmB,EAAa,GAAK,EAAIiB,EACzBnC,EAAGkB,EAAa,GAAK,EAAIkB,GAEvBhC,IAAAA,EAAYC,QAAAA,IAAIC,EAAMC,EAAOC,EAAUC,KAI/C,IAAM4B,EAAiB,IAAIrJ,EAAOkE,QAAAA,OAAO,YAEzCmF,EAAe7E,QAAQ,eAEvB,IAAM8E,EAAc,IAAItJ,EAAOkE,QAAAA,OAAO,SAEtCoF,EAAY9E,QAAQ,YAEpB,IAAM+E,EAAe,IAAIvJ,EAAOkE,QAAAA,OAAO,UAEvCqF,EAAalF,MAAb,EAAA,mBAAqB,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EACdrE,GAAAA,EAAOC,QAAAA,QAAQuJ,UADD,CAAA,EAAA,KAAA,EAAA,MAAA,OAEVvJ,EAAAA,QAAAA,QAAQwJ,IAAMzJ,EAAOC,QAAAA,QAAQuI,EAAEkB,WAAW,KAAM,CAAEC,OAAO,IAChEJ,EAAaK,YAAc,EAHV,EAAA,OAAA,UAAA,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,MAQrBL,EAAanF,KAAb,EAAA,mBAAoB,KAAA,SAAA,IAAA,IAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAyBXpE,OAxBFA,EAAOC,QAAAA,QAAQuJ,YACZC,EAAMzJ,EAAOC,QAAAA,QAAQwJ,IAC3BF,EAAaK,cACbH,EAAII,UAAU,EAAE,EAAE7J,EAAOC,QAAAA,QAAQuI,EAAEC,MAAMzI,EAAOC,QAAAA,QAAQuI,EAAEE,QACnDlG,EAAAA,QAAAA,YAAYsC,QAAQ,SAACxB,GACpBiE,IAAAA,EAAQjE,EAAOL,WAAWsE,MAC1BD,EAAOhE,EAAOL,WAAWqE,KACzBE,EAAWlE,EAAOL,WAAWuE,SACnCiC,EAAIK,YACJL,EAAIM,UAAmBxC,OAAAA,OAAAA,EAAMb,EAAMa,MAAAA,OAAAA,EAAMZ,EAAMY,MAAAA,OAAAA,EAAMX,EAArD,KACA6C,EAAIO,YAAqBzC,OAAAA,OAAAA,EAAMb,EAAI,IAAQa,MAAAA,OAAAA,EAAMZ,EAAMY,MAAAA,OAAAA,EAAMX,EAA7D,KACA6C,EAAIQ,IAAIzC,EAAST,EAAGS,EAASR,EAAGM,EAAKJ,OAAQ,EAAG,EAAIrE,KAAKqH,IACzDT,EAAIU,SACJV,EAAIW,UAEFb,EAAaK,YAAc,IAAO,IAClCL,EAAac,UAAYrK,EAAOuB,QAAAA,OAClCgI,EAAaK,YAAc,EAC3BL,EAAac,SAAWrK,EAAOuB,QAAAA,IAAM,QAEvCkI,EAAIa,KAAO,iBACXb,EAAIM,UAAY,OAChBN,EAAIc,SAAShB,EAAac,SAAU,GAAI,KAEnCrK,EAAAA,OAAAA,SAAAA,EAAOwC,QAAAA,aAzBI,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,MA8BpB+G,EAAa/E,QAAQ,YAAa,EAAG,WAC/BxE,GAAAA,EAAOC,QAAAA,QAAQuJ,UAAW,CACtBgB,IAAAA,EAASxK,EAAOC,QAAAA,QAAQuI,EACxBiC,EAAYD,EAAOE,YACnBC,EAAeH,EAAOI,WAC5BD,EAAaE,YAAYL,GACzBG,EAAaG,YAAYL,GAClBxK,EAAAA,QAAAA,QAAQuI,EAAIiC,EAEbjB,IAAAA,EAAYxJ,EAAOC,QAAAA,QAAQuI,EAAEuC,6BAC5B,MAAA,CACLjK,KAAM0I,EACN7H,eAAgB6H,GAGb,OAAA,IAGT,IAAMwB,EAAgB,IAAIhL,EAAOkE,QAAAA,OAAO,WACxC8G,EAAc5G,KAAd,EAAA,mBAAqB,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EACnB4G,EAAcC,OAAOnG,QAAQ,SAACoG,GACxBA,GAAa,IAAbA,EAAM,GAAU,CACZ5D,IAAAA,EAAOY,EAAa,IAAM,EAC1BX,EAAQ,CACZb,EAAIwB,EAAa,KACjBvB,EAAI,MACJC,EAAI,OAEAY,EAAW,CACfT,EAAGmE,EAAM,GACTlE,EAAGkE,EAAM,IAEL/B,EAAWjB,EAAa,GAAM,GAAK,EACnCkB,EAAWlB,EAAa,GAAM,GAAK,EACnCT,EAAW,CACfV,EAAGmB,EAAa,GAAK,EAAIiB,EACzBnC,EAAGkB,EAAa,GAAK,EAAIkB,GAEvBhC,IAAAA,EAAYC,QAAAA,IAAIC,EAAMC,EAAOC,EAAUC,QACrB,IAAbyD,EAAM,IACR1I,EAAAA,QAAAA,YAAYsC,QAAQ,SAACqG,GACDD,IAAAA,EAAAA,EAAAA,EADS,GAC3BE,EAD2B,EAAA,GACnBC,EADmB,EAAA,GAEjBF,EAAAA,EAAIlI,WAAWuE,SAAxBT,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EACHE,EAAWiE,EAAIlI,WAAWqE,KAA1BJ,OACUrE,KAAKyI,MAAMF,EAAOrE,EAAGsE,EAASrE,IAAO,EAAIE,GAElDzE,EAAAA,QAAAA,OAAOU,QAAQgI,EAAIzI,QAKlCsI,EAAcC,OAAOhJ,OAAS,EAhCX,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,MAmCrB+I,EAAc3G,MAAQ,WAChBkH,IAAAA,GAAY,EAChBP,EAAcC,OAAS,GAChBhL,EAAAA,QAAAA,QAAQuI,EAAEgD,iBAAiB,YAAa,SAACpG,GAC9CmG,EAAYnG,EAAMqG,OAClBT,EAAcC,OAAO/H,KAAK,CAACkC,EAAMsG,OAAQtG,EAAMuG,OAAQvG,EAAMqG,WAExDxL,EAAAA,QAAAA,QAAQuI,EAAEgD,iBAAiB,YAAa,SAACpG,GAC5B,IAAdmG,GAAiC,IAAdA,GACrBP,EAAcC,OAAO/H,KAAK,CAACkC,EAAMsG,OAAQtG,EAAMuG,OAAQJ,MAGpDtL,EAAAA,QAAAA,QAAQuI,EAAEgD,iBAAiB,UAAW,WAC3CD,GAAY,IAEPtL,EAAAA,QAAAA,QAAQuI,EAAEgD,iBAAiB,cAAe,SAASI,GACxDA,EAAEC,oBAIS,IAAA,EAAA,CACbxD,gBAAAA,EACAgB,eAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAyB,cAAAA,GALa,QAAA,QAAA;;AChHf,aAvDA,IAGIxC,EAHJ,EAAA,EAAA,QAAA,oBACA,EAAA,EAAA,QAAA,iBAsDA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,MAAA,GAAA,YAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,QAAA,QAAA,GAAA,KAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,WAAA,IAAA,EAAA,KAAA,EAAA,UAAA,OAAA,IAAA,QAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,EAAA,GAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAAA,GAAA,OAAA,MAlDA,IAAIsD,EAAY,oBACZC,EAAW,UAIf/L,EAAOC,QAAAA,QAAQwI,MAAQ,IACvBzI,EAAOC,QAAAA,QAAQyI,OAAS,KAGxBF,EAAIwD,SAASC,eAAe,MAC1BxD,MAAQzI,EAAOC,QAAAA,QAAQwI,MACzBD,EAAEE,OAAS1I,EAAOC,QAAAA,QAAQyI,OACtBF,EAAEuC,2BACG9K,EAAAA,QAAAA,QAAQuJ,WAAY,EAEpBvJ,EAAAA,QAAAA,QAAQuJ,WAAY,EAI7BxJ,EAAOC,QAAAA,QAAQuI,EAAIA,EAKnB0D,EAAQ7D,QAAAA,gBAAgBC,QAAU,IAGlCtI,EAAOuF,QAAAA,aAAe,CAAC2G,EAAQ7D,QAAAA,iBAG/BrI,EAAOyF,QAAAA,YAAc,CACnByG,EAAQ7C,QAAAA,eACR6C,EAAQ5C,QAAAA,YACR4C,EAAQ3C,QAAAA,aACR2C,EAAQlB,QAAAA,eAIVhL,EAAOqC,QAAAA,QAGP2J,SAASG,cAAc,UAAUX,iBAAiB,QAAS,SAACpG,GACtDpF,EAAO0F,QAAAA,SACFM,EAAAA,QAAAA,QACPZ,EAAMgH,OAAOC,UAAYN,IAElB9F,EAAAA,QAAAA,OACPb,EAAMgH,OAAOC,UAAYP,KAG7BE,SAASG,cAAc,YAAYX,iBAAiB,QAApD,EAAA,mBAA6D,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EACpDxF,EAAAA,QAAAA,QACCqC,EAAAA,QAAAA,gBAAgBC,QAAUgE,SAASN,SAASG,cAAc,cAAcI,OACzEtM,EAAAA,QAAAA,QAAQC,YAAcoM,SAASN,SAASG,cAAc,iBAAiBI,OACvEzG,EAAAA,QAAAA,UACPkG,SAASG,cAAc,UAAUE,UAAYP,EALc,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA","file":"bouncyballs.a828d95c.js","sourceRoot":"../src/examples/bouncyballs","sourcesContent":["const Workers = {\n  Entify: {},\n  globals: {},\n  workerCount: 0,\n  async destroyWorker(worker) {\n    await worker.terminate();\n    Workers.workerCount--;\n    return;\n  },\n  createWorkers(numWorkers=5, src) {\n    let workers = new Array(numWorkers);\n    for (var i = 0; i < numWorkers; i++) {\n      workers[i] = new Worker(src);\n    }\n    Workers.workerCount += numWorkers;\n    return workers;\n  },\n  doWork(worker, data, allData) {\n    return new Promise((resolve, reject) => {\n      worker.onmessage = resolve;\n      worker.onerror = reject;\n      worker.postMessage({ \n        chunk: data,\n        allData,\n        fps: Workers.Entify.fps,\n        globals: JSON.stringify(Workers.globals),\n      });\n    });\n  },\n  doInit(worker, data, transferrables) {\n    const tfer = (transferrables) ? [transferrables] : undefined;\n    return new Promise((resolve, reject) => {\n      worker.onmessage = resolve;\n      worker.onerror = reject;\n      worker.postMessage({\n        init: true,\n        data,\n        transferrables,\n      }, tfer);\n    });\n  },\n  doDistributedWork(workers, data) {\n    // data size is always a multiple of the number of workers\n    var elementsPerWorker = data.length / workers.length;\n    return Promise.all(workers.map((worker, index) => {\n      const start = index * elementsPerWorker;\n      const promise = Workers.doWork(worker, data.slice(start, start+elementsPerWorker), data);\n      worker.promise = promise;\n      return promise;\n    }));\n  }\n};\n\nexport default Workers;","import Workers from './workers.js';\nconst Entify = {};\nWorkers.Entify = Entify;\n\n// namespace to store some stuff to get passed to all systems and their workers\nEntify.globals = {};\n\n// E\nEntify.allEntities = [];\nEntify.Entity = function () {\n  this.id = (+new Date()).toString(16) + \n  (Math.random() * 100000000 | 0).toString(16) +\n  Entify.Entity.prototype.count;\n  Entify.Entity.prototype.count++;\n  this.components = {};\n  Entify.allEntities.push(this);\n  return this;\n};\nEntify.Entity.prototype.count = 0;\n\nEntify.Entity.destroy = function(id) {\n  const idx = Entify.allEntities.findIndex((entity) => {\n    return entity.id === id;\n  });\n  if (idx) {\n    Entify.allEntities.splice(idx, 1);\n  }\n};\n\nEntify.Entity.prototype.print = function () {\n  console.log(JSON.stringify(this, null, 4));\n  return this;\n};\n\n// C\nEntify.Entity.prototype.addComponent = function ( component ){\n  this.components[component.name] = component;\n  return this;\n};\n\nEntify.Entity.prototype.removeComponent = function ( componentName ){\n  var name = componentName; // assume a string was passed in\n\n  if(typeof componentName === 'function'){ \n    name = componentName.prototype.name;\n  }\n\n  delete this.components[name];\n  return this;\n};\n\nEntify.Components = {}; \n\n// S\nEntify.AllSystems = [];\nEntify.System = function(name) {\n  this.setName(name);\n  this.work = () => {};\n  this.setup = () => {};\n  this.postSetup = () => {};\n  this.cleanup = () => {};\n  this.globals = Entify.globals; // systems can use this directly but just in case, make a reference\n  Entify.AllSystems.push(this);\n  return this;\n};\n\nEntify.System.prototype.setName = function(name) {\n  this.name = name;\n  return this;\n};\n\n// NOTE: this overrides the setup, cleanup and work functions\n// initData is thunk that returns an object in the form \n//   {data: data, transferrables: transferrables}\nEntify.System.prototype.workify = function(workerScript, numberOfWorkers, getInitData) {\n  const oldSetup = this.setup.bind(this);\n  this.setup = async () => {\n    await oldSetup();\n    if (this.workers && this.workers.length) {\n      this.workers.forEach((worker) => {\n        worker.terminate();\n      });\n      this.workers.length = 0;\n    }\n    const numWorkers = numberOfWorkers || Entify.globals.workerCount;\n    Workers.globals = Entify.globals;\n    this.workers = Workers.createWorkers(numWorkers, workerScript);\n    // in the event your worker(s) need initialization\n    if (getInitData) {\n      for (let worker of this.workers) {\n        const initData = getInitData();\n        if (initData) {\n          await Workers.doInit(worker, initData.data, initData.transferrables);\n        }\n      }\n      return;\n    } else {\n      return;\n    }\n  };\n\n  this.oldWork = this.work;\n  this.work = async () => {\n    await this.oldWork();\n    return await Workers.doDistributedWork(this.workers, Entify.allEntities)\n      .then((results) => {\n        let entities = [];\n        results.forEach((event) => {\n          entities = entities.concat(event.data);\n        });\n        Entify.allEntities = entities;\n        return results;\n      });\n  };\n\n  this.oldCleanup = this.cleanup;\n  this.cleanup = async () => {\n    await this.oldCleanup();\n    if (this.workers && this.workers.length) {\n      for (const worker of this.workers) {\n        await worker.promise;\n      }\n      for (const worker of this.workers) {\n        await Workers.destroyWorker(worker);\n      }\n      this.workers.length = 0;\n    }\n    return;\n  };\n};\n\nEntify.start = async () => {\n  for (const system of Entify.startSystems) {\n    await system.work(Entify.allEntities);\n  }\n  for (const system of Entify.loopSystems) {\n    await system.setup();\n  }\n  Entify.playing = true;\n  window.requestAnimationFrame(Entify.loop);\n};\n\nEntify.restart = async () => {\n  Entify.playing = false;\n  await Entify.reset();\n  window.requestAnimationFrame(Entify.start);\n};\n\nEntify.pause = () => {\n  Entify.playing = false;\n};\n\nEntify.play = () => {\n  Entify.playing = true;\n  window.requestAnimationFrame(Entify.loop);\n};\n\nEntify.reset = async () => {\n  for (const system of Entify.startSystems) {\n    await system.cleanup();\n  }\n  for (const system of Entify.loopSystems) {\n    await system.cleanup();\n  }\n  Entify.allEntities.length = 0;\n  return;\n};\n\n// now do work with the update loops\nlet stamp = performance.now();\n\nEntify.loop = async () => {\n  for (let system of Entify.loopSystems) {\n    await system.work(Entify.allEntities);\n  }\n  const newStamp = performance.now();\n  const delta = (newStamp - stamp);\n  Entify.deltaTime = delta;\n  const deltaSeconds = delta / 1000;\n  Entify.fps = Math.round(1/deltaSeconds);\n  stamp = newStamp;\n  if (Entify.playing) {\n    window.requestAnimationFrame(Entify.loop);\n  }\n};\n\nexport default Entify;","// Components\nconst Components = {};\n\nComponents.Color = function(h = 0, s = 0, l = 0) {\n  this.h = h;\n  this.s = s;\n  this.l = l;\n  return this;\n};\n\nComponents.Color.prototype.name = 'color';\n\nComponents.Position = function(x=0, y=0) {\n  this.x = x;\n  this.y = y;\n  return this;\n};\n\nComponents.Position.prototype.name = 'position';\n\nComponents.Size = function(radius=0.1) {\n  this.radius = radius;\n  return this;\n};\n\nComponents.Size.prototype.name = 'size';\n\nComponents.Velocity = function(x = 1, y = 1) {\n  this.x = x;\n  this.y = y;\n  return this;\n}; \n\nComponents.Velocity.prototype.name = 'velocity';\n\nexport default Components;","import Entify from '../../Entify.js';\nimport Components from './components.js';\nconst Assemblages = {\n  Dot: function(size, color, position, velocity) {\n    let entity = new Entify.Entity();\n    let hue = color.h || 0;\n    let saturation = color.s || 0;\n    let luminance = color.l || 0;\n    let posY = position.y;\n    let posX = position.x;\n    let velX = velocity.x;\n    let velY = velocity.y;\n    entity.addComponent(new Components.Color(hue, saturation, luminance));\n    entity.addComponent(new Components.Size(size));\n    entity.addComponent(new Components.Position(posX,posY));\n    entity.addComponent(new Components.Velocity(velX, velY));\n    return entity;\n  }\n};\n\nexport default Assemblages;","const Utils = {\n  getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  },\n};\n\nexport default Utils;","import Entify from '../../Entify.js';\nimport Assemblages from './assemblages.js';\nimport Utils from './util.js';\n\nconst getRandomInt = Utils.getRandomInt;\n\n// setup configs\n\nconst generatorSystem = new Entify.System('generator');\n\ngeneratorSystem.work = () => {\n  let numDots = generatorSystem.numDots;\n  let ratio = c.width / c.height;\n  let cols = Math.ceil(Math.sqrt(numDots * ratio));\n  let rows = Math.ceil(Math.sqrt(numDots / ratio));\n  let pixelsPerCol = c.width/cols;\n  let pixelsPerRow = c.height/rows;\n  let row = 0;\n  let col = 0;\n  while (numDots--) {\n    const color = {\n      h : getRandomInt(360),\n      s : '60%', \n      l : '50%',\n    };\n    const size = getRandomInt(10) + 3;\n    if (col < cols) {\n      col++;\n    } else {\n      col = 0;\n      row++;\n    }\n    const x = ( row + 1 ) * pixelsPerRow + 15;\n    const y = ( col + 1 ) * pixelsPerCol + 15;\n    const position = { x, y };\n    const xSign = (!!getRandomInt(1)) ? 1 : -1;\n    const ySign = (!!getRandomInt(1)) ? 1 : -1;\n    const velocity = {\n      x: getRandomInt(6) + 1 * xSign,\n      y: getRandomInt(6) + 1 * ySign,\n    };\n    new Assemblages.Dot(size, color, position, velocity);\n  }\n};\n\nconst colliderSystem = new Entify.System('collider');\n\ncolliderSystem.workify('collider.js');\n\nconst moverSystem = new Entify.System('mover');\n\nmoverSystem.workify('mover.js');\n\nconst drawerSystem = new Entify.System('drawer');\n\ndrawerSystem.setup = async () => {\n  if (!Entify.globals.offscreen) {\n    Entify.globals.ctx = Entify.globals.c.getContext('2d', { alpha: true });\n    drawerSystem.perfCounter = 0;\n    return;\n  }\n};\n\ndrawerSystem.work = async () => {\n  if (!Entify.globals.offscreen) {\n    const ctx = Entify.globals.ctx;\n    drawerSystem.perfCounter++;\n    ctx.clearRect(0,0,Entify.globals.c.width,Entify.globals.c.height);\n    Entify.allEntities.forEach((entity) => {\n      const color = entity.components.color;\n      const size = entity.components.size;\n      const position = entity.components.position;\n      ctx.beginPath();\n      ctx.fillStyle = `hsl(${color.h}, ${color.s}, ${color.l})`;\n      ctx.strokeStyle = `hsl(${color.h + 180}, ${color.s}, ${color.l})`;\n      ctx.arc(position.x, position.y, size.radius, 0, 2 * Math.PI);\n      ctx.stroke();\n      ctx.fill();\n    });\n    if (drawerSystem.perfCounter % 30 === 0 ||\n      (!drawerSystem.perfText && Entify.fps)) {\n      drawerSystem.perfCounter = 0;\n      drawerSystem.perfText = Entify.fps + ' fps';\n    }\n    ctx.font = '32px helvetica';\n    ctx.fillStyle = '#fff';\n    ctx.fillText(drawerSystem.perfText, 10, 50);\n  }\n  return Entify.allEntities;\n};\n\n// you can't transfer the offscreen canvas to multiple workers... yet?\n// you also have make a new canvas to pass to the new worker thread\ndrawerSystem.workify('drawer.js', 1, () => {\n  if (Entify.globals.offscreen) {\n    const canvas = Entify.globals.c;\n    const newCanvas = canvas.cloneNode();\n    const canvasParent = canvas.parentNode;\n    canvasParent.removeChild(canvas);\n    canvasParent.appendChild(newCanvas);\n    Entify.globals.c = newCanvas;\n  \n    const offscreen = Entify.globals.c.transferControlToOffscreen();\n    return {\n      data: offscreen, \n      transferrables: offscreen,\n    };\n  }\n  return false;\n});\n\nconst clickerSystem = new Entify.System('clicker');\nclickerSystem.work = async () => {\n  clickerSystem.clicks.forEach((click) => {\n    if (click[2] === 0) {\n      const size = getRandomInt(10) + 3;\n      const color = {\n        h : getRandomInt(360),\n        s : '60%', \n        l : '50%',\n      };\n      const position = {\n        x: click[0],\n        y: click[1],\n      };\n      const xSign = (!!getRandomInt(1)) ? 1 : -1;\n      const ySign = (!!getRandomInt(1)) ? 1 : -1;\n      const velocity = {\n        x: getRandomInt(6) + 1 * xSign,\n        y: getRandomInt(6) + 1 * ySign,\n      };\n      new Assemblages.Dot(size, color, position, velocity);\n    } else if (click[2] === 2) { // right click\n      Entify.allEntities.forEach((dot) => {\n        const [mouseX, mouseY] = click;\n        const { x, y } = dot.components.position;\n        const { radius } = dot.components.size;\n        const intersect = Math.hypot(mouseX-x, mouseY - y) <= (1 + radius);\n        if (intersect) {\n          Entify.Entity.destroy(dot.id);\n        }\n      });\n    }\n  });\n  clickerSystem.clicks.length = 0;\n};\n\nclickerSystem.setup = () => {\n  let mousedown = false;\n  clickerSystem.clicks = [];\n  Entify.globals.c.addEventListener('mousedown', (event) => {\n    mousedown = event.button;\n    clickerSystem.clicks.push([event.layerX, event.layerY, event.button]);\n  });\n  Entify.globals.c.addEventListener('mousemove', (event) => {\n    if (mousedown === 0 || mousedown === 2) {\n      clickerSystem.clicks.push([event.layerX, event.layerY, mousedown]);\n    }\n  });\n  Entify.globals.c.addEventListener('mouseup', () => {\n    mousedown = false;\n  });\n  Entify.globals.c.addEventListener('contextmenu', function(e) {\n    e.preventDefault();\n  });\n};\n\nexport default {\n  generatorSystem,\n  colliderSystem,\n  moverSystem,\n  drawerSystem,\n  clickerSystem,\n};","import Entify from '../../Entify.js';\nimport Systems from './systems.js';\n\nlet c;\n\nlet PAUSE_TXT = '&#10074; &#10074;';\nlet PLAY_TXT = '&#9654;';\n\n// Implementation\n\nEntify.globals.width = 800;\nEntify.globals.height = 600;\n\n// gonna use a canvas on the page\nc = document.getElementById('c');\nc.width = Entify.globals.width;\nc.height = Entify.globals.height;\nif (c.transferControlToOffscreen) {\n  Entify.globals.offscreen = true;\n} else {\n  Entify.globals.offscreen = false;\n}\n\n// now we need to pass the canvas/context into places that need it\nEntify.globals.c = c;\n// we can get c.width and height most places, but not in workers\n\n\n// initial numDots (changed with form on page)\nSystems.generatorSystem.numDots = 200;\n\n// register start systems\nEntify.startSystems = [Systems.generatorSystem];\n\n// register loop systems\nEntify.loopSystems = [\n  Systems.colliderSystem,\n  Systems.moverSystem,\n  Systems.drawerSystem,\n  Systems.clickerSystem,\n];\n\n// let's party!\nEntify.start();\n\n// let the user party!\ndocument.querySelector('#pause').addEventListener('click', (event) => {\n  if (Entify.playing) {\n    Entify.pause();\n    event.target.innerHTML = PLAY_TXT;\n  } else {\n    Entify.play();\n    event.target.innerHTML = PAUSE_TXT;\n  }\n});\ndocument.querySelector('#restart').addEventListener('click', async () => {\n  Entify.pause();\n  Systems.generatorSystem.numDots = parseInt(document.querySelector('#dotsInput').value);\n  Entify.globals.workerCount = parseInt(document.querySelector('#workersInput').value);\n  Entify.restart();\n  document.querySelector('#pause').innerHTML = PAUSE_TXT;\n});\n"]}